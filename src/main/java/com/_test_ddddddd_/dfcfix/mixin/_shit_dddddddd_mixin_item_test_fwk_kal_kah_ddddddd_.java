













































































































































































































































































































































































































































































































































package com._test_ddddddd_.dfcfix.mixin;//your.package.mixin;

import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;

import com.hbm.items.machine.ItemLens;        //shenr
import net.minecraft.item.ItemStack;

import java.lang.reflect.Field;
import java.lang.reflect.Method;

@Mixin(ItemLens.class)
public class _shit_dddddddd_mixin_item_test_fwk_kal_kah_ddddddd_{//.java//MixinItemLens {
    // 直接声明：运行时会把这个 field 注入到目标类，名字就是 maxDamage
    public int maxDamage = 0;

    // 构造后尝试把真实值同步进这个字段（容错，不抛异常）
    @Inject(method = "<init>", at = @At("RETURN"))
    private void onConstruct(CallbackInfo ci) {
        try {
            // 优先尝试公开 getter
            try {
                Method m = this.getClass().getMethod("getMaxDamage", ItemStack.class);
                Object r = null;
                try { r = m.invoke(this, (Object) null); } catch (IllegalArgumentException ignored) {}
                if (r instanceof Number) { this.maxDamage = ((Number) r).intValue(); return; }
            } catch (NoSuchMethodException ignored) {}

            try {
                Method m0 = this.getClass().getMethod("getMaxDamage");
                Object r0 = m0.invoke(this);
                if (r0 instanceof Number) { this.maxDamage = ((Number) r0).intValue(); return; }
            } catch (NoSuchMethodException ignored) {}

            // 尝试反射读私有字段（混淆名）
            Class<?> cls = this.getClass();
            for (Field f : cls.getDeclaredFields()) {
                if (f.getType() == int.class) {
                    String n = f.getName().toLowerCase();
                    if (n.contains("max") || n.contains("dur") || n.contains("field_")) {
                        f.setAccessible(true);
                        Object val = f.get(this);
                        if (val instanceof Integer) { this.maxDamage = (Integer) val; return; }
                    }
                }
            }
        } catch (Throwable t) {
            t.printStackTrace(); // 不要阻塞类加载
        }
    }
}
